{"version":3,"sources":["components/Profile/ProfileForm.module.css","components/Layout/MainNavigation.module.css","components/Profile/UserProfile.module.css","components/StartingPage/StartingPageContent.module.css","store/auth-context.js","components/Layout/MainNavigation.js","components/Layout/Layout.js","components/Profile/ProfileForm.js","components/Profile/UserProfile.js","components/Auth/AuthForm.js","pages/AuthPage.js","components/StartingPage/StartingPageContent.js","pages/HomePage.js","App.js","index.js","components/Auth/AuthForm.module.css"],"names":["module","exports","logoutTimer","AuthContext","React","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","AuthContextProvider","props","initialToken","tokenData","storedToken","localStorage","getItem","storedExpirationTime","remainingTime","removeItem","duration","retrievedStoredToken","useState","setToken","userIsLoggedIn","logOutHandler","useCallback","clearTimeout","useEffect","console","log","setTimeout","ctxValue","setItem","Provider","value","children","MainNavigation","authCtx","useContext","userIsLogggedIn","className","classes","header","to","logo","onClick","Layout","ProfileForm","history","useHistory","newPasswordInputRef","useRef","form","onSubmit","event","preventDefault","enteredNewPassword","current","fetch","method","body","JSON","stringify","idToken","password","returnSecureToken","headers","then","res","replace","control","htmlFor","type","id","ref","action","UserProfile","profile","AuthForm","isLogin","setIsLogin","isLoading","setIsLoading","emailInputRef","passwordInputRef","auth","url","enteredEmail","enteredPassword","email","ok","json","data","errorMessage","error","message","Error","expiresIn","toISOString","catch","err","alert","required","actions","toggle","prevState","AuthPage","StartingPageContent","starting","HomePage","App","authContext","path","exact","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.972e7ba7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileForm_form__O3Tc4\",\"control\":\"ProfileForm_control__3RAJ4\",\"action\":\"ProfileForm_action__4UunR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__3sLKr\",\"logo\":\"MainNavigation_logo__3tYHB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"UserProfile_profile__3DBJT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starting\":\"StartingPageContent_starting__1TJeG\"};","import React, { useState, useEffect, useCallback } from \"react\"\r\n\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n})\r\n\r\n//To calculate total time the user should be logged in. Basically auto-logout the user after 1hour\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  const currentTime = new Date().getTime()\r\n  const adjExpirationTime = new Date(expirationTime).getTime()\r\n\r\n  const remainingDuration = adjExpirationTime - currentTime\r\n  return remainingDuration\r\n}\r\n\r\nlet logoutTimer\r\n\r\nconst retrievedStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"TOKEN_VALUE\")\r\n  const storedExpirationTime = localStorage.getItem(\"EXPIRATION_TIME\")\r\n\r\n  const remainingTime = calculateRemainingTime(storedExpirationTime)\r\n  if (remainingTime <= 60000) {\r\n    //one minute = 60000ms\r\n    localStorage.removeItem(\"TOKEN_VALUE\")\r\n    localStorage.removeItem(\"EXPIRATION_TIME\")\r\n    return null\r\n  }\r\n\r\n  return {\r\n    token: storedToken,\r\n    duration: remainingTime,\r\n  }\r\n}\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  //checking for locally stored token\r\n  const tokenData = retrievedStoredToken()\r\n  let initialToken\r\n  if (tokenData) {\r\n    initialToken = tokenData.token\r\n  }\r\n\r\n  const [token, setToken] = useState(initialToken)\r\n  // if a token is received, then user is logggedin, or else no\r\n\r\n  const userIsLoggedIn = !!token //Converts a truthy or a falsey value into boolean true or false. If the token is a string that is not empty, then value will be true. If the token is a string which is empty, then false will be the value.\r\n\r\n  const logOutHandler = useCallback(() => {\r\n    setToken(null)\r\n    //removing the token from localStorage when the user logs out.\r\n    localStorage.removeItem(\"TOKEN_VALUE\")\r\n    localStorage.removeItem(\"EXPIRATION_TIME\")\r\n\r\n    if (logoutTimer) {\r\n      clearTimeout(logoutTimer)\r\n    }\r\n  }, [])\r\n\r\n  const logInHandler = (token, expirationTime) => {\r\n    setToken(token)\r\n\r\n    //storing the token locally so when the user refreshed the page, the token is not lost.\r\n    localStorage.setItem(\"TOKEN_VALUE\", token)\r\n    localStorage.setItem(\"EXPIRATION_TIME\", expirationTime)\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime)\r\n    logoutTimer = setTimeout(logOutHandler, remainingTime)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (tokenData) {\r\n      console.log(tokenData.duration)\r\n      logoutTimer = setTimeout(logOutHandler, tokenData.duration)\r\n    }\r\n  }, [tokenData, logOutHandler])\r\n\r\n  const ctxValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: logInHandler,\r\n    logout: logOutHandler,\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={ctxValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default AuthContext\r\n","import { Link } from \"react-router-dom\"\nimport { useContext } from \"react\"\nimport AuthContext from \"../../store/auth-context\"\n\nimport classes from \"./MainNavigation.module.css\"\n\nconst MainNavigation = () => {\n  const authCtx = useContext(AuthContext)\n  const userIsLogggedIn = authCtx.isLoggedIn\n\n  const logoutHandler = () => {\n    authCtx.logout()\n  }\n\n  return (\n    <header className={classes.header}>\n      <Link to=\"/\">\n        <div className={classes.logo}>React Auth</div>\n      </Link>\n      <nav>\n        <ul>\n          {!userIsLogggedIn && (\n            <li>\n              <Link to=\"/auth\">Login</Link>\n            </li>\n          )}\n\n          {userIsLogggedIn && (\n            <li>\n              <Link to=\"/profile\">Profile</Link>\n            </li>\n          )}\n\n          {userIsLogggedIn && (\n            <li>\n              <button onClick={logoutHandler}>Logout</button>\n            </li>\n          )}\n        </ul>\n      </nav>\n    </header>\n  )\n}\n\nexport default MainNavigation\n","import { Fragment } from \"react\"\n\nimport MainNavigation from \"./MainNavigation\"\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </Fragment>\n  )\n}\n\nexport default Layout\n","import { useRef, useContext } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport AuthContext from \"../../store/auth-context\"\nimport classes from \"./ProfileForm.module.css\"\n\nconst ProfileForm = () => {\n  const history = useHistory()\n\n  const newPasswordInputRef = useRef()\n\n  const authCtx = useContext(AuthContext)\n\n  const passwordFormHandler = (event) => {\n    event.preventDefault()\n\n    const enteredNewPassword = newPasswordInputRef.current.value\n\n    //We can do validation here\n\n    fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDNwhv3Nz8NwXPGVF7aZZkXffe38f4q0os\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          idToken: authCtx.token,\n          password: enteredNewPassword,\n          returnSecureToken: false,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    ).then((res) => {\n      //Assumption: We assume that it is always successfull!\n\n      history.replace(\"/\")\n    })\n  }\n\n  return (\n    <form className={classes.form} onSubmit={passwordFormHandler}>\n      <div className={classes.control}>\n        <label htmlFor=\"new-password\">New Password</label>\n        <input type=\"password\" id=\"new-password\" ref={newPasswordInputRef} />\n      </div>\n      <div className={classes.action}>\n        <button>Change Password</button>\n      </div>\n    </form>\n  )\n}\n\nexport default ProfileForm\n","import ProfileForm from './ProfileForm';\nimport classes from './UserProfile.module.css';\n\nconst UserProfile = () => {\n  return (\n    <section className={classes.profile}>\n      <h1>Your User Profile</h1>\n      <ProfileForm />\n    </section>\n  );\n};\n\nexport default UserProfile;\n","import { useState, useRef, useContext } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport AuthContext from \"../../store/auth-context\"\n\nimport classes from \"./AuthForm.module.css\"\n\nconst AuthForm = () => {\n  const [isLogin, setIsLogin] = useState(true)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const history = useHistory()\n\n  const emailInputRef = useRef()\n  const passwordInputRef = useRef()\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => {\n      // console.log(prevState)\n      return !prevState\n    })\n  }\n\n  const authCtx = useContext(AuthContext)\n  const submitFormHandler = (event) => {\n    event.preventDefault()\n\n    const enteredEmail = emailInputRef.current.value\n    const enteredPassword = passwordInputRef.current.value\n\n    setIsLoading(true)\n    let url\n    if (isLogin) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDNwhv3Nz8NwXPGVF7aZZkXffe38f4q0os\"\n    } else {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDNwhv3Nz8NwXPGVF7aZZkXffe38f4q0os\"\n    }\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        setIsLoading(false)\n        if (res.ok) {\n          return res.json()\n        } else {\n          return res.json().then((data) => {\n            //handle error here - Eg: showing error modal\n            // console.log(data)\n\n            let errorMessage = \"Authentication Failed!\"\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message\n\n              throw new Error(errorMessage)\n            }\n          })\n        }\n      })\n      .then((data) => {\n        // console.log(data)\n\n        // Converting the time to milliseconds from seconds\n        const expirationTime = new Date(\n          new Date().getTime() + +data.expiresIn * 1000\n        )\n        authCtx.login(data.idToken, expirationTime.toISOString())\n        history.replace(\"/\") //when we replace url like this, the user cannot go to previous page by clicking the back arrow on browser\n      })\n      .catch((err) => {\n        alert(err.message)\n      })\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitFormHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"email\" id=\"email\" ref={emailInputRef} required />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            ref={passwordInputRef}\n            required\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\n          )}\n          {isLoading && <p>Sending Request...</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  )\n}\n\nexport default AuthForm\n","import AuthForm from '../components/Auth/AuthForm';\n\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n","import { useContext } from \"react\"\nimport AuthContext from \"../../store/auth-context\"\nimport classes from \"./StartingPageContent.module.css\"\n\nconst StartingPageContent = () => {\n  const authCtx = useContext(AuthContext)\n  return (\n    <section className={classes.starting}>\n      <h1>\n        {authCtx.isLoggedIn ? \"Welcome on Board!\" : \"Please LogIn to Continue\"}\n      </h1>\n    </section>\n  )\n}\n\nexport default StartingPageContent\n","import StartingPageContent from '../components/StartingPage/StartingPageContent';\n\nconst HomePage = () => {\n  return <StartingPageContent />;\n};\n\nexport default HomePage;\n","import { useContext } from \"react\"\nimport { Switch, Route, Redirect } from \"react-router-dom\"\n\nimport Layout from \"./components/Layout/Layout\"\nimport UserProfile from \"./components/Profile/UserProfile\"\nimport AuthPage from \"./pages/AuthPage\"\nimport HomePage from \"./pages/HomePage\"\nimport AuthContext from \"./store/auth-context\"\n\nfunction App() {\n  const authContext = useContext(AuthContext)\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n        {!authContext.isLoggedIn && (\n          <Route path=\"/auth\">\n            <AuthPage />\n          </Route>\n        )}\n        <Route path=\"/profile\">\n          {authContext.isLoggedIn && <UserProfile />}\n          {!authContext.isLoggedIn && <Redirect to=\"/auth\" />}\n        </Route>\n        <Route path=\"*\">\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Layout>\n  )\n}\n\nexport default App\n","import ReactDOM from \"react-dom/client\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport { AuthContextProvider } from \"./store/auth-context\"\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"))\nroot.render(\n  <AuthContextProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </AuthContextProvider>\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__cZMrG\",\"control\":\"AuthForm_control__3pmPp\",\"actions\":\"AuthForm_actions__2Iotx\",\"toggle\":\"AuthForm_toggle__3kCcV\"};"],"sourceRoot":""}